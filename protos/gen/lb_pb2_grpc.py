# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import lb_pb2 as lb__pb2


class LoadBalancerStub(object):
  """The LoadBalance service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.OnServerRequested = channel.unary_unary(
        '/load_balancer.LoadBalancer/OnServerRequested',
        request_serializer=lb__pb2.ServerRequest.SerializeToString,
        response_deserializer=lb__pb2.SelectedServer.FromString,
        )


class LoadBalancerServicer(object):
  """The LoadBalance service definition.
  """

  def OnServerRequested(self, request, context):
    """Sends a minimum load server request
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoadBalancerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'OnServerRequested': grpc.unary_unary_rpc_method_handler(
          servicer.OnServerRequested,
          request_deserializer=lb__pb2.ServerRequest.FromString,
          response_serializer=lb__pb2.SelectedServer.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'load_balancer.LoadBalancer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
