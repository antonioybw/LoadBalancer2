# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import processor_pb2 as processor__pb2


class ProcessorJobHandlerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.OnDispatchReceived = channel.unary_unary(
        '/processor.ProcessorJobHandler/OnDispatchReceived',
        request_serializer=processor__pb2.JobMeta.SerializeToString,
        response_deserializer=processor__pb2.Empty.FromString,
        )
    self.JobQueueSizeRequested = channel.unary_unary(
        '/processor.ProcessorJobHandler/JobQueueSizeRequested',
        request_serializer=processor__pb2.Empty.SerializeToString,
        response_deserializer=processor__pb2.JobQueueMeta.FromString,
        )


class ProcessorJobHandlerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def OnDispatchReceived(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def JobQueueSizeRequested(self, request, context):
    """Give a user photo, generate ff and icon for DB
    rpc OnImageDispatchReceived(JobMeta) returns (Empty) {}

    Give the load balancer the job_queue size
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProcessorJobHandlerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'OnDispatchReceived': grpc.unary_unary_rpc_method_handler(
          servicer.OnDispatchReceived,
          request_deserializer=processor__pb2.JobMeta.FromString,
          response_serializer=processor__pb2.Empty.SerializeToString,
      ),
      'JobQueueSizeRequested': grpc.unary_unary_rpc_method_handler(
          servicer.JobQueueSizeRequested,
          request_deserializer=processor__pb2.Empty.FromString,
          response_serializer=processor__pb2.JobQueueMeta.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'processor.ProcessorJobHandler', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
